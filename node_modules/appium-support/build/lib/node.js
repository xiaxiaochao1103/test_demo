"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.requirePackage = requirePackage;

require("source-map-support/register");

var _system = require("./system");

var _logger = _interopRequireDefault(require("./logger"));

var _teen_process = require("teen_process");

async function linkGlobalPackage(packageName) {
  try {
    _logger.default.debug(`Linking package '${packageName}'`);

    const cmd = (0, _system.isWindows)() ? 'npm.cmd' : 'npm';
    await (0, _teen_process.exec)(cmd, ['link', packageName], {
      timeout: 20000
    });
  } catch (err) {
    const msg = `Unable to load package '${packageName}', linking failed: ${err.message}`;

    _logger.default.debug(msg);

    if (err.stderr) {
      _logger.default.debug(err.stderr);
    }

    throw new Error(msg);
  }
}

async function requirePackage(packageName) {
  try {
    _logger.default.debug(`Loading local package '${packageName}'`);

    return require(packageName);
  } catch (err) {
    _logger.default.debug(`Failed to load package '${packageName}': ${err.message}`);

    await linkGlobalPackage(packageName);
  }

  try {
    _logger.default.debug(`Retrying load of local package '${packageName}'`);

    return require(packageName);
  } catch (err) {
    _logger.default.errorAndThrow(`Unable to load package '${packageName}': ${err.message}`);
  }
}require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9ub2RlLmpzIl0sIm5hbWVzIjpbImxpbmtHbG9iYWxQYWNrYWdlIiwicGFja2FnZU5hbWUiLCJsb2ciLCJkZWJ1ZyIsImNtZCIsInRpbWVvdXQiLCJlcnIiLCJtc2ciLCJtZXNzYWdlIiwic3RkZXJyIiwiRXJyb3IiLCJyZXF1aXJlUGFja2FnZSIsInJlcXVpcmUiLCJlcnJvckFuZFRocm93Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQVNBLGVBQWVBLGlCQUFmLENBQWtDQyxXQUFsQyxFQUErQztBQUM3QyxNQUFJO0FBQ0ZDLG9CQUFJQyxLQUFKLENBQVcsb0JBQW1CRixXQUFZLEdBQTFDOztBQUNBLFVBQU1HLEdBQUcsR0FBRywyQkFBYyxTQUFkLEdBQTBCLEtBQXRDO0FBQ0EsVUFBTSx3QkFBS0EsR0FBTCxFQUFVLENBQUMsTUFBRCxFQUFTSCxXQUFULENBQVYsRUFBaUM7QUFBQ0ksTUFBQUEsT0FBTyxFQUFFO0FBQVYsS0FBakMsQ0FBTjtBQUNELEdBSkQsQ0FJRSxPQUFPQyxHQUFQLEVBQVk7QUFDWixVQUFNQyxHQUFHLEdBQUksMkJBQTBCTixXQUFZLHNCQUFxQkssR0FBRyxDQUFDRSxPQUFRLEVBQXBGOztBQUNBTixvQkFBSUMsS0FBSixDQUFVSSxHQUFWOztBQUNBLFFBQUlELEdBQUcsQ0FBQ0csTUFBUixFQUFnQjtBQUdkUCxzQkFBSUMsS0FBSixDQUFVRyxHQUFHLENBQUNHLE1BQWQ7QUFDRDs7QUFDRCxVQUFNLElBQUlDLEtBQUosQ0FBVUgsR0FBVixDQUFOO0FBQ0Q7QUFDRjs7QUFXRCxlQUFlSSxjQUFmLENBQStCVixXQUEvQixFQUE0QztBQUMxQyxNQUFJO0FBQ0ZDLG9CQUFJQyxLQUFKLENBQVcsMEJBQXlCRixXQUFZLEdBQWhEOztBQUNBLFdBQU9XLE9BQU8sQ0FBQ1gsV0FBRCxDQUFkO0FBQ0QsR0FIRCxDQUdFLE9BQU9LLEdBQVAsRUFBWTtBQUNaSixvQkFBSUMsS0FBSixDQUFXLDJCQUEwQkYsV0FBWSxNQUFLSyxHQUFHLENBQUNFLE9BQVEsRUFBbEU7O0FBQ0EsVUFBTVIsaUJBQWlCLENBQUNDLFdBQUQsQ0FBdkI7QUFDRDs7QUFDRCxNQUFJO0FBQ0ZDLG9CQUFJQyxLQUFKLENBQVcsbUNBQWtDRixXQUFZLEdBQXpEOztBQUNBLFdBQU9XLE9BQU8sQ0FBQ1gsV0FBRCxDQUFkO0FBQ0QsR0FIRCxDQUdFLE9BQU9LLEdBQVAsRUFBWTtBQUNaSixvQkFBSVcsYUFBSixDQUFtQiwyQkFBMEJaLFdBQVksTUFBS0ssR0FBRyxDQUFDRSxPQUFRLEVBQTFFO0FBQ0Q7QUFDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzV2luZG93cyB9IGZyb20gJy4vc3lzdGVtJztcbmltcG9ydCBsb2cgZnJvbSAnLi9sb2dnZXInO1xuaW1wb3J0IHsgZXhlYyB9IGZyb20gJ3RlZW5fcHJvY2Vzcyc7XG5cblxuLyoqXG4gKiBJbnRlcm5hbCB1dGlsaXR5IHRvIGxpbmsgZ2xvYmFsIHBhY2thZ2UgdG8gbG9jYWwgY29udGV4dFxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IC0gbmFtZSBvZiB0aGUgcGFja2FnZSB0byBsaW5rXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIGNvbW1hbmQgZmFpbHNcbiAqL1xuYXN5bmMgZnVuY3Rpb24gbGlua0dsb2JhbFBhY2thZ2UgKHBhY2thZ2VOYW1lKSB7XG4gIHRyeSB7XG4gICAgbG9nLmRlYnVnKGBMaW5raW5nIHBhY2thZ2UgJyR7cGFja2FnZU5hbWV9J2ApO1xuICAgIGNvbnN0IGNtZCA9IGlzV2luZG93cygpID8gJ25wbS5jbWQnIDogJ25wbSc7XG4gICAgYXdhaXQgZXhlYyhjbWQsIFsnbGluaycsIHBhY2thZ2VOYW1lXSwge3RpbWVvdXQ6IDIwMDAwfSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGNvbnN0IG1zZyA9IGBVbmFibGUgdG8gbG9hZCBwYWNrYWdlICcke3BhY2thZ2VOYW1lfScsIGxpbmtpbmcgZmFpbGVkOiAke2Vyci5tZXNzYWdlfWA7XG4gICAgbG9nLmRlYnVnKG1zZyk7XG4gICAgaWYgKGVyci5zdGRlcnIpIHtcbiAgICAgIC8vIGxvZyB0aGUgc3RkZXJyIGlmIHRoZXJlLCBidXQgZG8gbm90IGFkZCB0byB0aHJvd24gZXJyb3IgYXMgaXQgaXNcbiAgICAgIC8vIF92ZXJ5XyB2ZXJib3NlXG4gICAgICBsb2cuZGVidWcoZXJyLnN0ZGVycik7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICB9XG59XG5cbi8qKlxuICogVXRpbGl0eSBmdW5jdGlvbiB0byBleHRlbmQgbm9kZSBmdW5jdGlvbmFsaXR5LCBhbGxvd2luZyB1cyB0byByZXF1aXJlXG4gKiBtb2R1bGVzIHRoYXQgYXJlIGluc3RhbGxlZCBnbG9iYWxseS4gSWYgdGhlIHBhY2thZ2UgY2Fubm90IGJlIHJlcXVpcmVkLFxuICogdGhpcyB3aWxsIGF0dGVtcHQgdG8gbGluayB0aGUgcGFja2FnZSBhbmQgdGhlbiByZS1yZXF1aXJlIGl0XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHBhY2thZ2VOYW1lIC0gdGhlIG5hbWUgb2YgdGhlIHBhY2thZ2UgdG8gYmUgcmVxdWlyZWRcbiAqIEByZXR1cm5zIHtvYmplY3R9IC0gdGhlIHBhY2thZ2Ugb2JqZWN0XG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBhY2thZ2UgaXMgbm90IGZvdW5kIGxvY2FsbHkgb3IgZ2xvYmFsbHlcbiAqL1xuYXN5bmMgZnVuY3Rpb24gcmVxdWlyZVBhY2thZ2UgKHBhY2thZ2VOYW1lKSB7XG4gIHRyeSB7XG4gICAgbG9nLmRlYnVnKGBMb2FkaW5nIGxvY2FsIHBhY2thZ2UgJyR7cGFja2FnZU5hbWV9J2ApO1xuICAgIHJldHVybiByZXF1aXJlKHBhY2thZ2VOYW1lKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgbG9nLmRlYnVnKGBGYWlsZWQgdG8gbG9hZCBwYWNrYWdlICcke3BhY2thZ2VOYW1lfSc6ICR7ZXJyLm1lc3NhZ2V9YCk7XG4gICAgYXdhaXQgbGlua0dsb2JhbFBhY2thZ2UocGFja2FnZU5hbWUpO1xuICB9XG4gIHRyeSB7XG4gICAgbG9nLmRlYnVnKGBSZXRyeWluZyBsb2FkIG9mIGxvY2FsIHBhY2thZ2UgJyR7cGFja2FnZU5hbWV9J2ApO1xuICAgIHJldHVybiByZXF1aXJlKHBhY2thZ2VOYW1lKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgbG9nLmVycm9yQW5kVGhyb3coYFVuYWJsZSB0byBsb2FkIHBhY2thZ2UgJyR7cGFja2FnZU5hbWV9JzogJHtlcnIubWVzc2FnZX1gKTtcbiAgfVxufVxuXG5leHBvcnQgeyByZXF1aXJlUGFja2FnZSB9O1xuIl0sImZpbGUiOiJsaWIvbm9kZS5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLiJ9
