"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.OptionalApplesimutilsCommandCheck = exports.OptionalIdbCommandCheck = exports.CarthageCheck = exports.AuthorizationDbCheck = exports.DevToolsSecurityCheck = exports.XcodeCmdLineToolsCheck = exports.XcodeCheck = exports.fixes = void 0;

require("source-map-support/register");

var _utils = require("./utils");

var _appiumSupport = require("appium-support");

var _teen_process = require("teen_process");

var _doctor = require("./doctor");

var _logger = _interopRequireDefault(require("./logger"));

var _carthageDetector = _interopRequireDefault(require("./carthage-detector"));

var _prompt = require("./prompt");

var _env = _interopRequireDefault(require("./env"));

var _lodash = _interopRequireDefault(require("lodash"));

require("colors");

let checks = [];
let fixes = {};
exports.fixes = fixes;

class XcodeCheck extends _doctor.DoctorCheck {
  async diagnose() {
    let xcodePath;

    try {
      await (0, _teen_process.exec)('xcrun', ['simctl', 'help']);
      const {
        stdout
      } = await (0, _teen_process.exec)('xcode-select', ['-p']);
      xcodePath = (stdout || '').replace('\n', '');
    } catch (err) {
      return (0, _utils.nok)('Xcode is NOT installed!');
    }

    return xcodePath && (await _appiumSupport.fs.exists(xcodePath)) ? (0, _utils.ok)(`Xcode is installed at: ${xcodePath}`) : (0, _utils.nok)(`Xcode cannot be found at '${xcodePath}'!`);
  }

  async fix() {
    return `Manually install ${'Xcode'.bold}, and make sure 'xcode-select -p' command shows proper path like '/Applications/Xcode.app/Contents/Developer'`;
  }

}

exports.XcodeCheck = XcodeCheck;
checks.push(new XcodeCheck());

class XcodeCmdLineToolsCheck extends _doctor.DoctorCheck {
  constructor() {
    super({
      autofix: true
    });
  }

  async diagnose() {
    const errMess = 'Xcode Command Line Tools are NOT installed!';

    try {
      const stdout = (await (0, _teen_process.exec)('xcode-select', ['-p'])).stdout;
      return (0, _utils.ok)(`Xcode Command Line Tools are installed in: ${stdout.trim()}`);
    } catch (err) {
      _logger.default.debug(err);

      return (0, _utils.nok)(errMess);
    }
  }

  async fix() {
    _logger.default.info(`The following command need be executed: xcode-select --install`);

    let yesno = await (0, _prompt.fixIt)();

    if (yesno === 'yes') {
      await (0, _teen_process.exec)('xcode-select', ['--install']);
    } else {
      _logger.default.info(`Skipping you will need to install ${'Xcode'.bold} manually.`);

      throw new _doctor.FixSkippedError();
    }
  }

}

exports.XcodeCmdLineToolsCheck = XcodeCmdLineToolsCheck;
checks.push(new XcodeCmdLineToolsCheck());

fixes.authorizeIosFix = async function () {
  _logger.default.info(`The authorize iOS script need to be run.`);

  let yesno = await (0, _prompt.fixIt)();

  if (yesno === 'yes') {
    await (0, _utils.authorizeIos)();
  } else {
    _logger.default.info(`Skipping you will need to run ${'the authorize iOS'.bold} manually.`);

    throw new _doctor.FixSkippedError();
  }
};

class DevToolsSecurityCheck extends _doctor.DoctorCheck {
  constructor() {
    super({
      autofix: true
    });
  }

  async diagnose() {
    const errMess = 'DevToolsSecurity is NOT enabled!';
    let stdout;

    try {
      stdout = (await (0, _teen_process.exec)('DevToolsSecurity', [])).stdout;
    } catch (err) {
      _logger.default.debug(err);

      return (0, _utils.nok)(errMess);
    }

    return stdout && stdout.match(/enabled/) ? (0, _utils.ok)('DevToolsSecurity is enabled.') : (0, _utils.nok)(errMess);
  }

  async fix() {
    return await fixes.authorizeIosFix();
  }

}

exports.DevToolsSecurityCheck = DevToolsSecurityCheck;
checks.push(new DevToolsSecurityCheck());

class AuthorizationDbCheck extends _doctor.DoctorCheck {
  constructor() {
    super({
      autofix: true
    });
  }

  async diagnose() {
    const successMess = 'The Authorization DB is set up properly.';
    const errMess = 'The Authorization DB is NOT set up properly.';
    let stdout;

    try {
      ({
        stdout
      } = await (0, _teen_process.exec)('security', ['authorizationdb', 'read', 'system.privilege.taskport']));
    } catch (err) {
      _logger.default.warn(err);

      return (0, _utils.nok)(errMess);
    }

    return stdout && (stdout.match(/is-developer/) || stdout.match(/allow/)) ? (0, _utils.ok)(successMess) : (0, _utils.nok)(errMess);
  }

  async fix() {
    return await fixes.authorizeIosFix();
  }

}

exports.AuthorizationDbCheck = AuthorizationDbCheck;
checks.push(new AuthorizationDbCheck());

class CarthageCheck extends _doctor.DoctorCheck {
  async diagnose() {
    let carthagePath = await _carthageDetector.default.detect();
    let version;

    if (carthagePath) {
      try {
        const {
          stdout
        } = await (0, _teen_process.exec)(carthagePath, ['version']);
        version = _lodash.default.last(stdout.match(/(\d+\.\d+\.\d+)/g));

        if (!_appiumSupport.util.coerceVersion(version, false)) {
          _logger.default.warn(`Cannot parse Carthage version from ${stdout}`);
        }
      } catch (err) {
        _logger.default.warn(err);
      }
    }

    return carthagePath ? (0, _utils.ok)(`Carthage was found at: ${carthagePath}${version ? `. Installed version is: ${version}` : ''}`) : (0, _utils.nok)(`Carthage was NOT found!`);
  }

  async fix() {
    return `Please install ${'Carthage'.bold}. Visit https://github.com/Carthage` + '/Carthage#installing-carthage for more information.';
  }

}

exports.CarthageCheck = CarthageCheck;
checks.push(new CarthageCheck());
checks.push(new _env.default('HOME'));

class OptionalIdbCommandCheck extends _doctor.DoctorCheck {
  async diagnose() {
    const fbIdbPath = await (0, _utils.resolveExecutablePath)('idb');
    const fbCompanionIdbPath = await (0, _utils.resolveExecutablePath)('idb_companion');

    if (fbIdbPath && fbCompanionIdbPath) {
      return (0, _utils.okOptional)('idb and idb_companion are installed');
    }

    if (!fbIdbPath && fbCompanionIdbPath) {
      return (0, _utils.nokOptional)('idb is not installed');
    } else if (fbIdbPath && !fbCompanionIdbPath) {
      return (0, _utils.nokOptional)('idb_companion is not installed');
    }

    return (0, _utils.nokOptional)('idb and idb_companion are not installed');
  }

  async fix() {
    return `Why ${'idb'.bold} is needed and how to install it: https://github.com/appium/appium-idb`;
  }

}

exports.OptionalIdbCommandCheck = OptionalIdbCommandCheck;
checks.push(new OptionalIdbCommandCheck());

class OptionalApplesimutilsCommandCheck extends _doctor.DoctorCheck {
  async diagnose() {
    const applesimutilsPath = await (0, _utils.resolveExecutablePath)('applesimutils');
    return applesimutilsPath ? (0, _utils.okOptional)(`applesimutils is installed at: ${applesimutilsPath}. Installed versions are: ${(await (0, _teen_process.exec)('brew', ['list', '--versions', 'applesimutils'])).stdout.trim()}`) : (0, _utils.nokOptional)('applesimutils cannot be found');
  }

  async fix() {
    return `Why ${'applesimutils'.bold} is needed and how to install it: http://appium.io/docs/en/drivers/ios-xcuitest/`;
  }

}

exports.OptionalApplesimutilsCommandCheck = OptionalApplesimutilsCommandCheck;
checks.push(new OptionalApplesimutilsCommandCheck());
var _default = checks;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
